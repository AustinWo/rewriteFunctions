/*
 * Basic tree that stores a value.
*/

var Tree = function(value){
  this.value = value;
  this.children = [];
};

Tree.prototype.addChild = function(child){
  if (!child || !(child instanceof Tree)){
    child = new Tree(child);
  }

  if(!this.isDescendant(child)){
    this.children.push(child);
  }else {
    throw new Error("That child is already a child of this tree");
  }
  //return child node for convenience
  return child;
};

Tree.prototype.isDescendant = function(child){
  if(this.children.indexOf(child) !== -1){
    // `child` is an immediate child of this tree
    return true;
  }else{
    for(var i = 0; i < this.children.length; i++){
      if(this.children[i].isDescendant(child)){
        // `child` is descendant of this tree
        return true;
      }
    }
    return false;
  }
};

Tree.prototype.removeChild = function(child){
  var index = this.children.indexOf(child);
  if(index !== -1){
    // remove the child
    this.children.splice(index,1);
  }else{
    throw new Error("That node is not an immediate child of this tree");
  }
};

Tree.prototype.mapInPlace = function (callback) {
  //update the values of the existing tree with values generated by the callback
  function applyCallback () {
    this.value = callback(this.value);
    for (var i = 0; i<this.children.length; i++) {
      applyCallback.call(this.children[i]);
    }
    return this;
  }
  applyCallback.call(this);
  return this;
};

// test cases

 var root1 = new Tree(1);
 var branch2 = root1.addChild(2);
 var branch3 = root1.addChild(3);
 var leaf4 = branch2.addChild(4);
 var leaf5 = branch2.addChild(5);
 var leaf6 = branch3.addChild(6);
 var leaf7 = branch3.addChild(7);
 var newTree = root1.mapInPlace(function (value) {
   return value * 2;
 })
// newTree.value // 2
// newTree.children[0].value // 4
// newTree.children[1].value // 6
// newTree.children[0].children[1].value // 10
// newTree.children[1].children
